#!/bin/bash
# Automatically submits a change in Gerrit if change has a reviewer 'autosubmit'.
# If necessary the change gets rebased automatically.

AUTOSUBMIT=autosubmit
GERRIT_SITE=~/review_site
GERRIT=localhost
GERRITPUSH=localhost_autosubmit
GERRITPORT=59418
WORKDIR=$GERRIT_SITE/tmp/autosubmit
SCRIPTDIR=${SCRIPTDIR:-$(pwd)/$(dirname "$0")}
CHANGEINFOFILE=$WORKDIR/changeinfo
LOGFILE=$GERRIT_SITE/logs/autosubmit.log

trap 'echo "$0: line ${LINENO}: exit status: $?"' ERR

[ -d $WORKDIR ] || mkdir -p $WORKDIR
[ -d $(dirname $LOGFILE) ] || mkdir -p $(dirname $LOGFILE)
declare -A currentChanges

if [ "$1" = "--debug" ]; then
	DEBUG=1
fi

log()
{
	echo
	echo "$(date +%H:%M:%S): $(basename $0) $CHANGE_NO: $@" >> $LOGFILE
}

debug()
{
	[ $DEBUG ] && echo "$(date +%H:%M:%S): $(basename $0) $CHANGE_NO: $@" >> $LOGFILE
	return 0
}

executeGerritCommand()
{
	ssh -l "Gerrit Code Review" -p $GERRITPORT localhost -i $GERRIT_SITE/etc/ssh_host_dsa_key \
		suexec --as $AUTOSUBMIT -- "$@"
}

getChangeInfo()
{
	executeGerritCommand gerrit query --format JSON --current-patch-set $CHANGE_ID > $CHANGEINFOFILE
}

getChangeState()
{
	cat $CHANGEINFOFILE | $SCRIPTDIR/getjson.py "status"
}

getSubmitState()
{
	executeGerritCommand gerrit test-submit-rule --format json_compact $CHANGE_ID | $SCRIPTDIR/getjson.py "status"
}

getLatestPatchSet()
{
	grep -o refs/changes/[0-9/]* $CHANGEINFOFILE
}

getCommit()
{
	cat $CHANGEINFOFILE | $SCRIPTDIR/getjson.py "currentPatchSet" "revision"
}

checkIfChangeIsSubmittable()
{
	# Check if current change has 'autosubmit' as reviewer
	debug "Check for autosubmit as reviewer"
	GREPARG=\"number\":\"$CHANGE_NO\"
	if ! executeGerritCommand gerrit query --format JSON status:open reviewer:$AUTOSUBMIT | grep -q $GREPARG; then
		log "Autosubmit user not assigned. Exiting."
		return 1
	fi

	getChangeInfo

	# Check that change isn't merged yet
	debug "Check merge state"
	CHANGESTATE=$(getChangeState)
	if [ "$CHANGESTATE" != "NEW" ] && [ "$CHANGESTATE" != "SUBMITTED" ]; then
		log "Change $CHANGE_ID is not open. Exiting."
		return 2
	fi

	# Check if change is ready to be submitted
	debug "Check if ready to submit"
	SUBMITSTATE=$(getSubmitState)

	if [ "$SUBMITSTATE" != "OK" ]; then
		log "Change $CHANGE_ID not ready for submit. Exiting."
		return 3
	fi

	return 0
}

rebaseChange()
{
	debug "Checkout change: git fetch git://$GERRIT/$PROJECT $(getLatestPatchSet) && git checkout FETCH_HEAD"
	git reset -q --hard origin/$BRANCH
	git fetch -q origin 2>> $LOGFILE
	git fetch -q git://$GERRIT/$PROJECT $(getLatestPatchSet) 2>> $LOGFILE && git checkout -q FETCH_HEAD

	debug "Rebase on origin/$BRANCH"
	#if ! git rebase -q origin/$BRANCH 2>> $LOGFILE > /dev/null; then
	if ! git rebase -q origin/$BRANCH 2>> $LOGFILE; then
		git rebase --abort
		debug "Rebase failed. Notifying user"
		echo "Rebasing change $CHANGE_ID ($CHANGE_URL) titled \"$(git log --pretty=format:%s -1 HEAD)\" failed.
	Please rebase locally and then send for review." | mail -s "AUTOSUBMIT: rebase failed" "$EMAIL" 2>> $LOGFILE
		return 1
	fi
	debug "Rebase successful"
	return 0
}

# Check if we can submit the change.
# Returns 0 if we can submit, or 1 if we had to rebase or if an error occurred.
canSubmit()
{
	local parentCommit

	[ ! -d "$WORKDIR" ] && mkdir -p "$WORKDIR"
	unset GIT_DIR
	cd "$WORKDIR"
	if [ ! -d "$WORKDIR/$PROJECT" ]; then
		debug "Cloning project $PROJECT"
		git clone git://$GERRIT/$PROJECT
		cd $PROJECT
		git remote set-url --push origin "ssh://$GERRITPUSH/$PROJECT.git"
	fi
	cd "$WORKDIR/$PROJECT"

	if [ $($SCRIPTDIR/getjson.py $patchset "parents" --len <<< $line) -gt 1 ]; then
		# Merge commit. Just try to submit...
		log "Merge commit. Trying to submit..."
		return 0
	fi
	parentCommit=$($SCRIPTDIR/getjson.py $patchset "parents" [0] <<< $line)
	#debug "parentCommit=$parentCommit"
	if ! rebaseChange; then
		# rebase failed
		debug "Rebase failed"
		return 1
	fi

	#debug "HEAD^=$(git rev-parse HEAD^); parentCommit=$parentCommit"
	if [ "$(git rev-parse HEAD^)" = "$parentCommit" ]; then
		debug "Rebase didn't change anything. Trying to submit..."
		return 0
	fi

	#debug "HEAD^=$(git rev-parse HEAD^); remote: $(git ls-remote origin $BRANCH | cut -f1)"
	if [ "$(git rev-parse HEAD^)" = "$(git ls-remote origin $BRANCH | cut -f1)" ]; then
		debug "Pushing rebased change for review"
		git push -q origin HEAD:refs/for/$BRANCH/$TOPIC 2>> $LOGFILE

		log "Uploaded rebased change for review"
		debug "Setting wait info for change $CHANGE_NO, project $PROJECT"
		currentChanges[$PROJECT]=$CHANGE_NO
		debug "Change $CHANGE_NO rebased"
		echo "rebased"
	else
		debug "Parent is not tip of $BRANCH"
	fi

	return 1
}

submitChange()
{
	if ! canSubmit; then
		debug "Change $CHANGE_NO not ready for submit yet"
		return 1
	fi

	# Try to submit
	debug "Try to submit"
	executeGerritCommand gerrit review -m "Change automagically submitted by autosubmit script" --submit "$(getCommit)"

	getChangeInfo
	if [ "$(getChangeState)" = "MERGED" ]; then
		log "Change $CHANGE_NO merged successfully."
	else
		log "Submit of change $CHANGE_NO failed."
		return 1
	fi
}

processChange()
{
	if [[ ${currentChanges[$PROJECT]} ]] && [ "${currentChanges[$PROJECT]}" != "$CHANGE_NO" ]; then
		debug "Waiting for change ${currentChanges[$PROJECT]}, but current change is $CHANGE_NO; skipping"
		return 1
	fi

	debug "Processing change $CHANGE_NO"
	currentChanges[$PROJECT]=""
	if ! checkIfChangeIsSubmittable; then
		debug "Change $CHANGE_NO not submittable"
	else
		debug "Change is good"
		if ! submitChange; then
			return 1
		fi
	fi
}

streamEventListener()
{
	log "Starting stream listener"
	while true
	do
		CHANGE_NO=""
		debug "Waiting for next comment"
		if read -t 300 line; then
			#debug "read line $line"
			patchset="patchSet"
			TYPE=$($SCRIPTDIR/getjson.py "type" <<< $line)

			if [ "$TYPE" = "comment-added" ]; then
				# We got a comment. Check if we're assigned as reviewer
				# and if the change is submittable. If it is we (try to)
				# submit it.
				debug "Read line for comment: $line"
				CHANGE_ID=$($SCRIPTDIR/getjson.py "change" "id" <<< $line)
				CHANGE_URL=$($SCRIPTDIR/getjson.py "change" "url" <<< $line)
				CHANGE_NO=$($SCRIPTDIR/getjson.py "change" "number" <<< $line)
				PROJECT=$($SCRIPTDIR/getjson.py "change" "project" <<< $line)
				BRANCH=$($SCRIPTDIR/getjson.py "change" "branch" <<< $line)
				TOPIC=$($SCRIPTDIR/getjson.py "change" "topic" <<< $line)
				EMAIL=$($SCRIPTDIR/getjson.py "change" "owner" "email" <<< $line)

				if [ "$($SCRIPTDIR/getjson.py "comment" <<< $line)" = "" ] && [ "$($SCRIPTDIR/getjson.py "approvals" <<< $line)" = "" ]; then
					debug "Uninteresting comment; skipping"
					continue
				fi

				processChange
			fi
		else
			# Check all open changes where we are assigned as reviewer. If any change is
			# submittable we (try to) submit it.
			debug "Got timeout waiting for comment. Checking open changes..."
			OLD_IFS=$IFS
			IFS=$'\n' changes=( $(executeGerritCommand gerrit query --format JSON status:open reviewer:$AUTOSUBMIT --current-patch-set) )
			IFS=$OLD_IFS
			# we always get a line that tells the row count, so we output one less
			debug "$((${#changes[@]}-1)) open changes are assigned to me..."
			patchset="currentPatchSet"
			for ((i=0; i < ${#changes[@]}; i++)); do
				line=${changes[$i]}
				TYPE=$($SCRIPTDIR/getjson.py "type" <<< $line)
				if [ "$TYPE" = "stats" ]; then
					continue
				fi

				CHANGE_ID=$($SCRIPTDIR/getjson.py "id" <<< $line)
				CHANGE_URL=$($SCRIPTDIR/getjson.py "url" <<< $line)
				CHANGE_NO=$($SCRIPTDIR/getjson.py "number" <<< $line)
				PROJECT=$($SCRIPTDIR/getjson.py "project" <<< $line)
				BRANCH=$($SCRIPTDIR/getjson.py "branch" <<< $line)
				TOPIC=$($SCRIPTDIR/getjson.py "topic" <<< $line)
				EMAIL=$($SCRIPTDIR/getjson.py "owner" "email" <<< $line)

				if [[ ${currentChanges[$PROJECT]} ]]; then
					# we're still waiting for a build to finish. Don't process this now!
					continue
				fi

				debug "Found a change waiting for me to review..."
				if  ! processChange; then
					# we did a rebase, so we have to wait until that's built. We do this
					# by monitoring the incoming comments
					break
				fi

			done
		fi
	done
}

log "**************************************************"
streamEventListener
